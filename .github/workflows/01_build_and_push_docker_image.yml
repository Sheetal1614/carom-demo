name: 01. Checkout, Build, Push(to jFrog on-prem and cloud) and Deploy
on:
  # Manual trigger from the UI
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specify git commit sha to build image from'
      deployto:
        type: choice
        description: 'Deploy the built image on environment.'
        options:
          - None
          - Integration
          - Integration and Qa

  # On push to branch
  push:
    branches:
      - master-tag_history

# Ensures that only one deploy task per branch/environment will run at a time.
concurrency:
  group: integration-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checkout_build_and_push_docker_image:
    runs-on: [ linux, PlatformAccelerator ]
    outputs:
      shortsha: ${{ steps.shortsha.outputs.shortsha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}

      - name: Generate git sha(short)
        id: shortsha
        run: echo "shortsha=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Print git sha(short)
        run: echo "The git sha(short) is ${{ steps.shortsha.outputs.shortsha }}"

      - name: Run script file
        run: |
          chmod +x ./.github/scripts/build.sh
          ./.github/scripts/build.sh
        shell: bash

      - name: Installing Buildx
        uses: docker/setup-buildx-action@v1
        id: buildx
        with:
          install: true

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            mckinsey-elm-dope-docker.jfrog.io/integration/carom
            artifacts.intranet.mckinsey.com/k8s-proposetowin-snapshots/carom
          # generate Docker tags based on the following events/attributes
          tags: |
            type=raw,value=latest
            type=raw,value=${{steps.shortsha.outputs.shortsha}}

      - name: Login to on-prem jFrog artifactory
        uses: docker/login-action@v1
        with:
          registry: artifacts.intranet.mckinsey.com
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}

      - name: Login to jFrog SAAS(mckinsey-elm-dope-docker)
        uses: docker/login-action@v1
        with:
          registry: mckinsey-elm-dope-docker.jfrog.io
          username: ${{ secrets.JFROG_USERNAME_RW }}
          password: ${{ secrets.JFROG_PASSWORD_RW }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            JFROG_USERNAME=${{ secrets.JFROG_USERNAME_RO }}
            JFROG_PASSWORD=${{ secrets.JFROG_PASSWORD_RO }}
          push: ${{ github.event_name != 'pull_request' }}
          file: Dockerfile4GoCD
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  call_deploy_int_workflow:
    needs: checkout_build_and_push_docker_image
    if: ${{ github.event_name == 'push' || github.event.inputs.deployto == 'Integration and Qa' || github.event.inputs.deployto == 'Integration' }}
    uses: ./.github/workflows/02_deploy_on_onprem_k8s_integration.yml
    with:
      workflowsha: ${{needs.checkout_build_and_push_docker_image.outputs.shortsha}}
      triggertype: ${{github.event_name}}
    secrets:
      ROLE_ID: ${{ secrets.ROLE_ID }}
      SECRET_ID: ${{ secrets.SECRET_ID }}

  call_deploy_qa_workflow:
    needs: [checkout_build_and_push_docker_image, call_deploy_int_workflow]
    if: ${{ github.event_name == 'push' || github.event.inputs.deployto == 'Integration and Qa' }}
    uses: ./.github/workflows/03_deploy_on_onprem_k8s_qa.yml
    with:
      workflowsha: ${{needs.checkout_build_and_push_docker_image.outputs.shortsha}}
      triggertype: ${{github.event_name}}
    secrets:
      ROLE_ID: ${{ secrets.ROLE_ID }}
      SECRET_ID: ${{ secrets.SECRET_ID }}
      ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
      ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
      JFROG_USERNAME_RW: ${{ secrets.JFROG_USERNAME_RW }}
      JFROG_PASSWORD_RW: ${{ secrets.JFROG_PASSWORD_RW }}
